// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIS_Ticket_daw.Models;

#nullable disable

namespace SIS_Ticket_daw.Migrations
{
    [DbContext(typeof(GestionTicketsDBContext))]
    [Migration("20250605053040_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestionTicketsDB.Models.Categorias_tickets", b =>
                {
                    b.Property<int>("id_categoria_ticket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_categoria_ticket"));

                    b.Property<string>("descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("nombre_categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id_categoria_ticket");

                    b.ToTable("Categorias_tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.archivos_comentarios", b =>
                {
                    b.Property<int>("id_archivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_archivo"));

                    b.Property<DateTime?>("fecha_subida")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_comentario")
                        .HasColumnType("int");

                    b.Property<string>("nombre_archivo")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ruta_archivo")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("tipo_archivo")
                        .HasColumnType("varchar(200)");

                    b.HasKey("id_archivo");

                    b.HasIndex("id_comentario");

                    b.ToTable("archivos_comentarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.asignacion_tickets", b =>
                {
                    b.Property<int>("id_asignacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_asignacion"));

                    b.Property<DateTime>("fecha_asignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_empleado")
                        .HasColumnType("int");

                    b.Property<int>("id_ticket")
                        .HasColumnType("int");

                    b.HasKey("id_asignacion");

                    b.HasIndex("id_empleado");

                    b.HasIndex("id_ticket");

                    b.ToTable("asignacion_tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.categorias_servicios", b =>
                {
                    b.Property<int>("id_categoria_servicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_categoria_servicio"));

                    b.Property<string>("descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("nombre_categoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id_categoria_servicio");

                    b.ToTable("categorias_servicios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.comentarios", b =>
                {
                    b.Property<int>("id_comentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_comentario"));

                    b.Property<string>("comentario_texto")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("fecha_asignacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_ticket")
                        .HasColumnType("int");

                    b.HasKey("id_comentario");

                    b.HasIndex("id_ticket");

                    b.ToTable("comentarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.empleados", b =>
                {
                    b.Property<int>("id_empleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_empleado"));

                    b.Property<int>("id_rol")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.HasKey("id_empleado");

                    b.HasIndex("id_rol");

                    b.HasIndex("id_usuario");

                    b.ToTable("empleados");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.estado_servicios", b =>
                {
                    b.Property<int>("id_estado_servicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_estado_servicio"));

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_estado_servicio");

                    b.ToTable("estado_servicios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.estado_tickets", b =>
                {
                    b.Property<int>("id_estado_ticket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_estado_ticket"));

                    b.Property<string>("descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_estado_ticket");

                    b.ToTable("estado_tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.prioridades_tickets", b =>
                {
                    b.Property<int>("id_prioridad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_prioridad"));

                    b.Property<string>("descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("nivel_prioridad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id_prioridad");

                    b.ToTable("prioridades_tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.roles", b =>
                {
                    b.Property<int>("id_rol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_rol"));

                    b.Property<string>("descripcion_rol")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("nombre_rol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id_rol");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.servicio_cliente", b =>
                {
                    b.Property<int>("id_servicio_cliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_servicio_cliente"));

                    b.Property<string>("descripcion_del_problema")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("fecha_del_probelma")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<string>("nombre_del_problema")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("id_servicio_cliente");

                    b.HasIndex("id_usuario");

                    b.ToTable("servicio_cliente");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.servicios", b =>
                {
                    b.Property<int>("id_servicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_servicio"));

                    b.Property<string>("descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("id_categoria_servicio")
                        .HasColumnType("int");

                    b.Property<int>("id_estado_servicio")
                        .HasColumnType("int");

                    b.Property<int?>("id_servicio_cliente")
                        .HasColumnType("int");

                    b.Property<string>("nombre_servicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("id_servicio");

                    b.HasIndex("id_categoria_servicio");

                    b.HasIndex("id_estado_servicio");

                    b.HasIndex("id_servicio_cliente");

                    b.ToTable("servicios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.tickets", b =>
                {
                    b.Property<int>("id_ticket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_ticket"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("fecha_cierre")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("fecha_creacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_categoria_ticket")
                        .HasColumnType("int");

                    b.Property<int>("id_estado_ticket")
                        .HasColumnType("int");

                    b.Property<int>("id_prioridad")
                        .HasColumnType("int");

                    b.Property<int>("id_servicio")
                        .HasColumnType("int");

                    b.Property<int>("id_usuario")
                        .HasColumnType("int");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id_ticket");

                    b.HasIndex("id_categoria_ticket");

                    b.HasIndex("id_estado_ticket");

                    b.HasIndex("id_prioridad");

                    b.HasIndex("id_servicio");

                    b.HasIndex("id_usuario");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.usuarios", b =>
                {
                    b.Property<int>("id_usuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_usuario"));

                    b.Property<string>("contrasena")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("correo_electronico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("genero")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id_usuario");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SIS_Ticket_daw.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GestionTicketsDB.Models.archivos_comentarios", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.comentarios", "comentarios")
                        .WithMany("archivos_comentarios")
                        .HasForeignKey("id_comentario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("comentarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.asignacion_tickets", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.empleados", "empleados")
                        .WithMany("asignacion_tickets")
                        .HasForeignKey("id_empleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.tickets", "tickets")
                        .WithMany("asignacion_tickets")
                        .HasForeignKey("id_ticket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("empleados");

                    b.Navigation("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.comentarios", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.tickets", "tickets")
                        .WithMany("comentarios")
                        .HasForeignKey("id_ticket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.empleados", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.roles", "roles")
                        .WithMany("empleados")
                        .HasForeignKey("id_rol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.usuarios", "usuarios")
                        .WithMany("empleados")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("roles");

                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.servicio_cliente", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.usuarios", "usuarios")
                        .WithMany("servicio_cliente")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.servicios", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.categorias_servicios", "categorias_servicios")
                        .WithMany("servicios")
                        .HasForeignKey("id_categoria_servicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.estado_servicios", "estado_servicios")
                        .WithMany("servicios")
                        .HasForeignKey("id_estado_servicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.servicio_cliente", "servicio_cliente")
                        .WithMany("servicios")
                        .HasForeignKey("id_servicio_cliente");

                    b.Navigation("categorias_servicios");

                    b.Navigation("estado_servicios");

                    b.Navigation("servicio_cliente");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.tickets", b =>
                {
                    b.HasOne("GestionTicketsDB.Models.Categorias_tickets", "Categorias_tickets")
                        .WithMany("tickets")
                        .HasForeignKey("id_categoria_ticket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.estado_tickets", "estado_tickets")
                        .WithMany("tickets")
                        .HasForeignKey("id_estado_ticket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.prioridades_tickets", "prioridades_tickets")
                        .WithMany("tickets")
                        .HasForeignKey("id_prioridad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.servicios", "servicios")
                        .WithMany("tickets")
                        .HasForeignKey("id_servicio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestionTicketsDB.Models.usuarios", "usuarios")
                        .WithMany("tickets")
                        .HasForeignKey("id_usuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias_tickets");

                    b.Navigation("estado_tickets");

                    b.Navigation("prioridades_tickets");

                    b.Navigation("servicios");

                    b.Navigation("usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SIS_Ticket_daw.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SIS_Ticket_daw.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIS_Ticket_daw.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SIS_Ticket_daw.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestionTicketsDB.Models.Categorias_tickets", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.categorias_servicios", b =>
                {
                    b.Navigation("servicios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.comentarios", b =>
                {
                    b.Navigation("archivos_comentarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.empleados", b =>
                {
                    b.Navigation("asignacion_tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.estado_servicios", b =>
                {
                    b.Navigation("servicios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.estado_tickets", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.prioridades_tickets", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.roles", b =>
                {
                    b.Navigation("empleados");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.servicio_cliente", b =>
                {
                    b.Navigation("servicios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.servicios", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.tickets", b =>
                {
                    b.Navigation("asignacion_tickets");

                    b.Navigation("comentarios");
                });

            modelBuilder.Entity("GestionTicketsDB.Models.usuarios", b =>
                {
                    b.Navigation("empleados");

                    b.Navigation("servicio_cliente");

                    b.Navigation("tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
